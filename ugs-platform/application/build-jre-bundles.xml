<project name="build jre bundles" default="create-jre-bundles" basedir=".">

  <!-- entry point. -->
  <target name="create-jre-bundles">
    <delete dir="${project.build.directory}/bundles"/>
    <mkdir  dir="${project.build.directory}/bundles"/>

    <!-- download and extract jre  -->
    <fetch-extract-jre bundle.dir="${project.build.directory}/bundles/macosx"      bundle="${ugs.mac.bundle.jvm.version}"     url.prefix="${ugs.bundle.java.url}"/>
    <fetch-extract-jre bundle.dir="${project.build.directory}/bundles/windows"     bundle="${ugs.windows.bundle.jvm.version}" url.prefix="${ugs.bundle.java.url}"/>
    <fetch-extract-jre bundle.dir="${project.build.directory}/bundles/linux"       bundle="${ugs.linux.bundle.jvm.version}"   url.prefix="${ugs.bundle.java.url}"/>
    <fetch-extract-jre bundle.dir="${project.build.directory}/bundles/raspberrypi" bundle="${ugs.rpi.bundle.jvm.version}"     url.prefix="${ugs.bundle.java.url}"/>

    <include-raspberrypi-javafx
      dir="${project.build.directory}/bundles/raspberrypi"
      url="${ugs.rpi.bundle.javafx.url}"/>

    <!-- get 7zip executable -->
    <condition property="platform.7zip" value="${basedir}/installer/7zip/7z.1602.MacOSX64">
      <os family="mac"/>
    </condition>

    <condition property="platform.7zip" value="${basedir}/installer/7zip/7z.1602.Linux32">
      <os family="unix"/>
    </condition>

    <condition property="platform.7zip" value="${basedir}/installer/7zip/7z.1602.Win32">
      <os family="windows"/>
    </condition>

    <!-- create self extracting archives -->
    <create-self-extracting-archive
      exe="${platform.7zip}"
      dir="${project.build.directory}/bundles/macosx"
      sfx.header="7z.1602.ConMacOSX64.sfx"
      sfx.dir="${basedir}/installer/7zip"
      sfx.output="bundle.bin"/>

    <create-self-extracting-archive
      exe="${platform.7zip}"
      dir="${project.build.directory}/bundles/windows"
      sfx.header="7z.1602.ConWin32.sfx"
      sfx.dir="${basedir}/installer/7zip"
      sfx.output="bundle.exe"/>

    <create-self-extracting-archive
      exe="${platform.7zip}"
      dir="${project.build.directory}/bundles/linux"
      sfx.header="7z.1602.ConLinux32.sfx"
      sfx.dir="${basedir}/installer/7zip"
      sfx.output="bundle.sh"/>

  </target>
  
  <macrodef name="create-self-extracting-archive">
    <attribute name="exe"/>
    <attribute name="dir"/>
    <attribute name="sfx.header"/>
    <attribute name="sfx.dir"/>
    <attribute name="sfx.output"/>
    <sequential>
      <exec dir="@{sfx.dir}" executable="@{exe}" failonerror="true">
        <arg line="a"/>
        <arg line="-mx9 -m0d=8m -mmt=off"/> <!-- smaller dictionary for less memory usage. -->
        <arg line="-sfx@{sfx.header}"/>
        <arg line="@{dir}/@{sfx.output}"/>
        <arg line="@{dir}/jre/*"/>
      </exec>

      <!-- remove old jre directory. -->
      <delete dir="@{dir}/jre"/>
    </sequential>
  </macrodef>

  <!-- RaspberryPi doesn't ship with JavaFX. So download the gluon version
       and merge the libraries into the standard JRE -->
  <macrodef name="include-raspberrypi-javafx">
    <attribute name="dir"/>
    <attribute name="url"/>
    <sequential>
      <get src="@{url}" dest="${project.build.directory}/gluon.javafx.zip"/>

      <!-- Unzip -->
      <mkdir dir="@{dir}/gluon"/>
      <exec dir="${project.build.directory}" executable="unzip" failonerror="true">
        <arg line="gluon.javafx.zip"/>
        <arg line="-d @{dir}/gluon"/>
      </exec>


      <!-- Get the JavaFX folder name -->
      <path id="javafx_name">
        <dirset dir="@{dir}/gluon" includes="*"/>
      </path>
      <property name="bundle.javafx.path" refid="javafx_name"/>

      <!-- Sync JavaFX libraries into JDK -->
      <exec dir="${project.build.directory}" executable="rsync" failonerror="true">
        <arg line="-a"/>
        <arg line="${bundle.javafx.path}/"/>
        <arg line="&quot;@{dir}/jre/&quot;"/>
      </exec>

      <delete dir="@{dir}/gluon"/>
    </sequential>
  </macrodef>

  <macrodef name="fetch-extract-jre">
    <attribute name="url.prefix"/>
    <attribute name="bundle"/>
    <attribute name="bundle.dir"/>
    <sequential>
      <echo message="Creating bundle for: @{bundle}"/>
      <echo message="In: @{bundle.dir}"/>

      <!-- download -->
      <echo message="Downloading bundle: @{url.prefix}/@{bundle}.tar.gz"/>
      <exec dir="${project.build.directory}" executable="curl" failonerror="true">
        <arg line="-L"/>
        <arg line="-b"/>
        <arg line="&quot;oraclelicense=accept-securebackup-cookie&quot;"/>
        <arg line="-O"/>
        <arg line="@{url.prefix}/@{bundle}.tar.gz"/>
      </exec>

      <!-- extract -->
      <mkdir dir="@{bundle.dir}"/>
      <exec dir="${project.build.directory}" executable="tar" failonerror="true">
        <arg line="-zxf"/>
        <arg line="@{bundle}.tar.gz"/>
        <arg line="-C &quot;@{bundle.dir}&quot;"/>
      </exec>

      <!-- rename directory to jre -->
      <move tofile="@{bundle.dir}/jre">
        <dirset dir="@{bundle.dir}" includes="*"/>
      </move>

      <!-- remove OSX symlink -->
      <if>
        <available file="@{bundle.dir}/jre/Contents"/>
        <then>
          <delete file="@{bundle.dir}/jre/Contents/MacOS/libjli.dylib"/>
          <copy file="@{bundle.dir}/jre/Contents/Home/lib/jli/libjli.dylib" todir="@{bundle.dir}/jre/Contents/MacOS"/>
        </then>
      </if>
    </sequential>
  </macrodef>
</project>
